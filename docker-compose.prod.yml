# Docker Compose override for PRODUCTION environment with Traefik
# Usage: docker-compose -f docker-compose.yml -f docker-compose.prod.yml up

services:
  backend:
    container_name: tagger_backend
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.tagger-backend.rule=PathPrefix(`/api`)"
      - "traefik.http.routers.tagger-backend.entrypoints=web"
      - "traefik.http.services.tagger-backend.loadbalancer.server.port=8000"
      - "traefik.http.middlewares.tagger-backend-cors.headers.accesscontrolalloworiginlist=${FRONTEND_DOMAIN:-yourdomain.com}"
      - "traefik.http.middlewares.tagger-backend-cors.headers.accesscontrolallowmethods=GET,POST,PUT,DELETE,OPTIONS"
      - "traefik.http.middlewares.tagger-backend-cors.headers.accesscontrolallowheaders=Content-Type,Authorization"
      - "traefik.http.middlewares.tagger-backend-cors.headers.addvaryheader=true"
      - "traefik.http.routers.tagger-backend.middlewares=tagger-backend-cors"
      - "containers.group=${COMPOSE_PROJECT_NAME:-tagger}"
    environment:
      DEBUG: false
      LOG_LEVEL: warning
      UVICORN_WORKERS: ${UVICORN_WORKERS:-4}
    restart: unless-stopped

  mapserver:
    container_name: tagger_mapserver
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.tagger-mapserver.rule=PathPrefix(`/mapserver`)"
      - "traefik.http.routers.tagger-mapserver.entrypoints=web"
      - "traefik.http.services.tagger-mapserver.loadbalancer.server.port=80"
      - "traefik.http.middlewares.tagger-mapserver-cors.headers.accesscontrolalloworiginlist=${FRONTEND_DOMAIN:-yourdomain.com}"
      - "traefik.http.middlewares.tagger-mapserver-cors.headers.addvaryheader=true"
      - "traefik.http.routers.tagger-mapserver.middlewares=tagger-mapserver-cors"
      - "containers.group=${COMPOSE_PROJECT_NAME:-tagger}"
    restart: unless-stopped

  frontend:
    build: 
      context: ./frontend
      args:
        VITE_API_BASE_URL: ${VITE_API_BASE_URL:-http://localhost:8000/api/v1}
    volumes:
      - ./frontend:/app
    env_file:
      - .env
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.tagger-frontend.rule=PathPrefix(`/`)"
      - "traefik.http.routers.tagger-frontend.entrypoints=web"
      - "traefik.http.services.tagger-frontend.loadbalancer.server.port=80"
      - "traefik.http.middlewares.tagger-frontend-headers.headers.customrequestheaders.X-Forwarded-Proto=https"
      - "traefik.http.routers.tagger-frontend.middlewares=tagger-frontend-headers"
      - "containers.group=${COMPOSE_PROJECT_NAME:-tagger}"
    restart: unless-stopped


  postgres:
    container_name: tagger_postgres
    labels:
      - "containers.group=${COMPOSE_PROJECT_NAME:-tagger}"
    restart: unless-stopped

  traefik:
    image: "traefik:v2.11"
    restart: unless-stopped
    command:
      - "--api=true"
      # - "--metrics.prometheus=true"
      # - "--metrics.prometheus.entryPoint=metrics"
      # - "--entrypoints.metrics.address=:8082"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.constraints=Label(`containers.group`,`${COMPOSE_PROJECT_NAME:-tagger}`)"
      - "--entrypoints.web.address=:80"
      #- "--entrypoints.websecure.address=:443"
      #- "--entrypoints.websecure.http.tls=true"
      - "--entryPoints.web.forwardedHeaders.insecure"
    ports:
      - "127.0.0.1:13080:80"
      - "127.0.0.1:13443:443"
      # - "127.0.0.1:18082:8082"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=PathPrefix(`/traefik/admin`) || PathPrefix(`/traefik/api`)|| HeadersRegexp(`Referer`, `.*/traefik/.*`)"
      - "traefik.http.routers.traefik.service=api@internal"
      - "traefik.http.routers.traefik.middlewares=admin-stripprefix"
      - "traefik.http.routers.traefik.entrypoints=web"
      - "traefik.http.routers.traefik.priority=9999"
      - "traefik.http.middlewares.admin-stripprefix.stripPrefix.prefixes=/traefik/admin,/traefik/]"
      - "traefik.http.middlewares.admin-stripprefix.stripPrefix.forceSlash=true"
      - "containers.group=${COMPOSE_PROJECT_NAME:-tagger}"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
